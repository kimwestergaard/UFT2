/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘Flights_API_Full_Flow_Price_Check.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir1 = null;
        public BindDirection bind_dir2 = null;
        public BindDirection bind_dir3 = null;
        public BindDirection bind_dir4 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity22 = null;
        public BindDirection bind_dir5 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity22_Policy = null;
        public BindDirection bind_dir6 = null;
        public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        public BindDirection bind_dir10 = null;
        public BindDirection bind_dir11 = null;
        public BindDirection bind_dir12 = null;
        public BindDirection bind_dir13 = null;
        public BindDirection bind_dir14 = null;
        public BindDirection bind_dir15 = null;
        public BindDirection bind_dir16 = null;
        public BindDirection bind_dir17 = null;
        public BindDirection bind_dir18 = null;
        public BindDirection bind_dir19 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity18 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity18");
            _flow.DataFetchActivity15 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity15");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity17 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity17");
            _flow.DataExporterActivity20 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity20");
            _flow.DataExporterCloseActivity21 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity21");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity16 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity16");
            _flow.DataDisconnectActivity19 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity19");
            this.DataCursorActivity22 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity22");
            this.DataCursorActivity22_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence14 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence14");
            _flow.StServiceCallActivity4 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity4");
            _flow.IfElse10 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse10Input>(_context,"IfElse10");
            _flow.IfElseBranch11 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch11");
            _flow.IfElseBranch12 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch12");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.StServiceCallActivity6 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity6");
            _flow.StServiceCallActivity13 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity13");
            _flow.DataFetchActivity18.Comment = @"";
            _flow.DataFetchActivity18.IconPath = @"";
            _flow.DataFetchActivity18.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity18.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity18_QueryParameters_Document = new XmlDocument();
            DataFetchActivity18_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity18Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>fcc434d5-4a14-4941-8be0-5cc3561bb561</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>WS_Flights!Output</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>WS_Flights</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{WS_Flights!Output.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Output$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity18_QueryParameters_Document.LoadXml(xmlDataFetchActivity18Params);
            _flow.DataFetchActivity18.QueryParameters = DataFetchActivity18_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("WS_Flights!Output", _flow.DataFetchActivity18);
            this.Activities.Add (_flow.DataFetchActivity18);
            _flow.DataFetchActivity15.Comment = @"";
            _flow.DataFetchActivity15.IconPath = @"";
            _flow.DataFetchActivity15.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity15.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity15_QueryParameters_Document = new XmlDocument();
            DataFetchActivity15_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity15Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>5eb03747-fa2b-4356-8da5-5ead002cd459</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>WS_Flights!Input</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>False</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>WS_Flights</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{WS_Flights!Input.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Input$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity15_QueryParameters_Document.LoadXml(xmlDataFetchActivity15Params);
            _flow.DataFetchActivity15.QueryParameters = DataFetchActivity15_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("WS_Flights!Input", _flow.DataFetchActivity15);
            this.Activities.Add (_flow.DataFetchActivity15);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyStoreLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyStorePassword = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyPassword = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 8 iterations";
            _flow.Loop2.NumberOfIterations = (int)8;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity22);
            _flow.Loop2.Activities.Add (_flow.Sequence14);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity17.Comment = @"";
            _flow.DataExporterActivity17.IconPath = @"";
            VTDPropertyInfoBase pi1 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter1 = new VTDObjectGetter(pi1);
            VTDPropertyInfoBase pi2 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter1 = new VTDObjectSetter(pi2);
            binding_setter1 = new StringFormaterDecorator(binding_setter1,"{Step.DataFetchActivity15.OutTable}");
            bind_dir1 = new BindDirection(_flow.DataFetchActivity15,binding_getter1,binding_setter1,BindTargetType.ToInProperty);
            _flow.DataExporterActivity17.InDirections.Add(bind_dir1);
            this.Activities.Add (_flow.DataExporterActivity17);
            _flow.DataExporterActivity20.Comment = @"";
            _flow.DataExporterActivity20.IconPath = @"";
            VTDPropertyInfoBase pi3 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter2 = new VTDObjectGetter(pi3);
            VTDPropertyInfoBase pi4 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter2 = new VTDObjectSetter(pi4);
            binding_setter2 = new StringFormaterDecorator(binding_setter2,"{Step.DataFetchActivity18.OutTable}");
            bind_dir2 = new BindDirection(_flow.DataFetchActivity18,binding_getter2,binding_setter2,BindTargetType.ToInProperty);
            _flow.DataExporterActivity20.InDirections.Add(bind_dir2);
            this.Activities.Add (_flow.DataExporterActivity20);
            _flow.DataExporterCloseActivity21.Comment = @"";
            _flow.DataExporterCloseActivity21.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity21);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity16.Comment = @"";
            _flow.DataDisconnectActivity16.IconPath = @"";
            VTDPropertyInfoBase pi5 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter3 = new VTDObjectGetter(pi5);
            VTDPropertyInfoBase pi6 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter3 = new VTDObjectSetter(pi6);
            binding_setter3 = new StringFormaterDecorator(binding_setter3,"{Step.DataFetchActivity15.OutTable}");
            bind_dir3 = new BindDirection(_flow.DataFetchActivity15,binding_getter3,binding_setter3,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity16.InDirections.Add(bind_dir3);
            this.Activities.Add (_flow.DataDisconnectActivity16);
            _flow.DataDisconnectActivity19.Comment = @"";
            _flow.DataDisconnectActivity19.IconPath = @"";
            VTDPropertyInfoBase pi7 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter4 = new VTDObjectGetter(pi7);
            VTDPropertyInfoBase pi8 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter4 = new VTDObjectSetter(pi8);
            binding_setter4 = new StringFormaterDecorator(binding_setter4,"{Step.DataFetchActivity18.OutTable}");
            bind_dir4 = new BindDirection(_flow.DataFetchActivity18,binding_getter4,binding_setter4,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity19.InDirections.Add(bind_dir4);
            this.Activities.Add (_flow.DataDisconnectActivity19);
            this.DataCursorActivity22.Comment = @"";
            this.DataCursorActivity22.IconPath = @"";
            VTDPropertyInfoBase pi9 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter5 = new VTDObjectGetter(pi9);
            VTDPropertyInfoBase pi10 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter5 = new VTDObjectSetter(pi10);
            binding_setter5 = new StringFormaterDecorator(binding_setter5,"{Step.DataFetchActivity15.OutTable}");
            bind_dir5 = new BindDirection(_flow.DataFetchActivity15,binding_getter5,binding_setter5,BindTargetType.ToInProperty);
            this.DataCursorActivity22.InDirections.Add(bind_dir5);
            this.DataCursorActivity22_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity22_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity22_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity22_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity22_Policy.StartCondition.Value = "";
            this.DataCursorActivity22_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity22_Policy.EndAtSpecificRow = 8;
            this.DataCursorActivity22_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity22_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity22_Policy.EndCondition.Value = "";
            this.DataCursorActivity22_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity22_Policy.StepSize = 1;
            this.DataCursorActivity22_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity22.Policy = this.DataCursorActivity22_Policy;
            this.DataCursorActivity22.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity22.ResetCursor;
            _flow.Sequence14.Comment = @"";
            _flow.Sequence14.IconPath = @"";
            _flow.Sequence14.Name = @"Sequence14";
            _flow.Sequence14.Activities.Add (_flow.StServiceCallActivity4);
            _flow.Sequence14.Activities.Add (_flow.IfElse10);
            XmlDocument StServiceCallActivity4_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity4_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity4_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>{DataSource.WS_Flights!Input.DepartureCity}</DepartureCity><ArrivalCity>{DataSource.WS_Flights!Input.ArrivalCity}</ArrivalCity><FlightDate>{DataSource.WS_Flights!Input.DepartureDate}</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity4.InputEnvelope = StServiceCallActivity4_InputEnvelope_Document;
            _flow.StServiceCallActivity4.Comment = @"";
            _flow.StServiceCallActivity4.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity4.Name = @"GetFlights";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity4.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity4.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity4.Service = @"Flights_Service";
            _flow.StServiceCallActivity4.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity4.Operation = @"GetFlights";
            _flow.StServiceCallActivity4.IsOneWay = false;
            _flow.StServiceCallActivity4.SendRequestToService=true;
            _flow.StServiceCallActivity4.FaultExpected=false;
            _flow.StServiceCallActivity4.IsAsync=false;
            _flow.StServiceCallActivity4.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity4.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi11 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter6 = new VTDObjectGetter(pi11);
            VTDPropertyInfoBase pi12 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter6 = new VTDXPathSetter(pi12,XmlTypeCode.DateTime);
            bind_dir6 = new BindDirection(this.DataCursorActivity22,binding_getter6,binding_setter6,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir6);
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("DepartureCity");
            VTDBaseGetter binding_getter7 = new VTDObjectGetter(pi13);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter7 = new VTDXPathSetter(pi14,XmlTypeCode.String);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{DataSource.WS_Flights!Input.DepartureCity}");
            bind_dir7 = new BindDirection(this.DataCursorActivity22,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir7);
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("ArrivalCity");
            VTDBaseGetter binding_getter8 = new VTDObjectGetter(pi15);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter8 = new VTDXPathSetter(pi16,XmlTypeCode.String);
            binding_setter8 = new StringFormaterDecorator(binding_setter8,"{DataSource.WS_Flights!Input.ArrivalCity}");
            bind_dir8 = new BindDirection(this.DataCursorActivity22,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity4.InDirections.Add(bind_dir8);
            XmlDocument StServiceCallActivity4_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity4.ExpectedOutputAttachments = StServiceCallActivity4_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity4_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity4.ExpectedFaultProperties = StServiceCallActivity4_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity4_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity4_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity4_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity4.ExpectedOutputProperties = StServiceCallActivity4_ExpectedOutputProperties_Document;
            set_StServiceCallActivity4_checkpoints(_flow.StServiceCallActivity4);
            _flow.IfElse10.ConditionAsString = @"{Step.OutputProperties.StServiceCallActivity4.Body.GetFlightsResponse.GetFlightsResult.Flight[1].Price} GreaterThan 175";
            _flow.IfElse10.Comment = @"";
            _flow.IfElse10.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse10.Name = @"Condition10";
            _flow.IfElse10.Activities.Add (_flow.IfElseBranch11);
            _flow.IfElse10.Activities.Add (_flow.IfElseBranch12);
            _flow.IfElseBranch11.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='Price'][1]");
            VTDBaseGetter binding_getter9 = new VTDXPathGetter(pi17,XmlTypeCode.Float);
            binding_getter9 = new XPathGetterDecorator(binding_getter9,"{Array0}",1);
            		System.Single expr00 = (System.Single)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StServiceCallActivity4.GetParam(binding_getter9),typeof(System.Single));
            		var result0 = expr00;
            		System.Single result1 = (System.Single)(175);
            		return (result0 > result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch11.Comment = @"";
            _flow.IfElseBranch11.IconPath = @"";
            _flow.IfElseBranch11.Name = @"Yes";
            _flow.IfElseBranch11.Activities.Add (_flow.StServiceCallActivity5);
            _flow.IfElseBranch11.Activities.Add (_flow.StServiceCallActivity6);
            _flow.IfElseBranch12.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch12.Comment = @"";
            _flow.IfElseBranch12.IconPath = @"";
            _flow.IfElseBranch12.Name = @"No";
            _flow.IfElseBranch12.Activities.Add (_flow.StServiceCallActivity13);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>{DataSource.WS_Flights!Input.Class}</Class><CustomerName>{DataSource.WS_Flights!Input.CustomerName}</CustomerName><DepartureDate>{DataSource.WS_Flights!Input.DepartureDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity4.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>{DataSource.WS_Flights!Input.NumberOfTickets}</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"Flights_Service";
            _flow.StServiceCallActivity5.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity5.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter10 = new VTDObjectGetter(pi18);
            VTDPropertyInfoBase pi19 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter9 = new VTDXPathSetter(pi19,XmlTypeCode.Int);
            bind_dir9 = new BindDirection(this.DataCursorActivity22,binding_getter10,binding_setter9,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir9);
            VTDPropertyInfoBase pi20 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter11 = new VTDXPathGetter(pi20,XmlTypeCode.Int);
            binding_getter11 = new XPathGetterDecorator(binding_getter11,"{Array0}",1);
            VTDPropertyInfoBase pi21 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter10 = new VTDXPathSetter(pi21,XmlTypeCode.Int);
            bind_dir10 = new BindDirection(_flow.StServiceCallActivity4,binding_getter11,binding_setter10,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir10);
            VTDPropertyInfoBase pi22 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter12 = new VTDObjectGetter(pi22);
            VTDPropertyInfoBase pi23 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter11 = new VTDXPathSetter(pi23,XmlTypeCode.DateTime);
            bind_dir11 = new BindDirection(this.DataCursorActivity22,binding_getter12,binding_setter11,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir11);
            VTDPropertyInfoBase pi24 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter13 = new VTDObjectGetter(pi24);
            VTDPropertyInfoBase pi25 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter12 = new VTDXPathSetter(pi25,XmlTypeCode.String);
            binding_setter12 = new StringFormaterDecorator(binding_setter12,"{DataSource.WS_Flights!Input.CustomerName}");
            bind_dir12 = new BindDirection(this.DataCursorActivity22,binding_getter13,binding_setter12,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir12);
            VTDPropertyInfoBase pi26 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter14 = new VTDObjectGetter(pi26);
            VTDPropertyInfoBase pi27 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter13 = new VTDXPathSetter(pi27,XmlTypeCode.String);
            binding_setter13 = new StringFormaterDecorator(binding_setter13,"{DataSource.WS_Flights!Input.Class}");
            bind_dir13 = new BindDirection(this.DataCursorActivity22,binding_getter14,binding_setter13,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir13);
            XmlDocument StServiceCallActivity5_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity5.ExpectedOutputAttachments = StServiceCallActivity5_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity5_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity5.ExpectedFaultProperties = StServiceCallActivity5_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber /><TotalPrice>{DataSource.WS_Flights!Input.Price}</TotalPrice></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity5.ExpectedOutputProperties = StServiceCallActivity5_ExpectedOutputProperties_Document;
            VTDPropertyInfoBase pi28 = new VTDPropertyInfoBase("Price");
            VTDBaseGetter binding_getter15 = new VTDObjectGetter(pi28);
            VTDPropertyInfoBase pi29 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='TotalPrice'][1]");
            VTDBaseSetter binding_setter14 = new VTDCheckpointSetter(XmlTypeCode.Float);
            bind_dir14 = new BindDirection(this.DataCursorActivity22,binding_getter15,binding_setter14,BindTargetType.ToInProperty);
            set_StServiceCallActivity5_checkpoints(_flow.StServiceCallActivity5);
            XmlDocument StServiceCallActivity6_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity6_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity6_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightOrders xmlns=""HP.SOAQ.SampleApp""><FlightsDetails><CustomerName p1:nil=""true"">{DataSource.WS_Flights!Input.CustomerName}</CustomerName><FlightDate>{DataSource.WS_Flights!Input.DepartureDate}</FlightDate><OrderNumber>{Step.OutputProperties.StServiceCallActivity5.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumber></FlightsDetails></GetFlightOrders></Body></Envelope>");
            _flow.StServiceCallActivity6.InputEnvelope = StServiceCallActivity6_InputEnvelope_Document;
            _flow.StServiceCallActivity6.Comment = @"";
            _flow.StServiceCallActivity6.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity6.Name = @"GetFlightOrders";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlightOrders";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity6.Service = @"Flights_Service";
            _flow.StServiceCallActivity6.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity6.Operation = @"GetFlightOrders";
            _flow.StServiceCallActivity6.IsOneWay = false;
            _flow.StServiceCallActivity6.SendRequestToService=true;
            _flow.StServiceCallActivity6.FaultExpected=false;
            _flow.StServiceCallActivity6.IsAsync=false;
            _flow.StServiceCallActivity6.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity6.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi30 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter16 = new VTDXPathGetter(pi30,XmlTypeCode.Int);
            VTDPropertyInfoBase pi31 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseSetter binding_setter15 = new VTDXPathSetter(pi31,XmlTypeCode.Int);
            bind_dir15 = new BindDirection(_flow.StServiceCallActivity5,binding_getter16,binding_setter15,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir15);
            VTDPropertyInfoBase pi32 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter17 = new VTDObjectGetter(pi32);
            VTDPropertyInfoBase pi33 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter16 = new VTDXPathSetter(pi33,XmlTypeCode.DateTime);
            bind_dir16 = new BindDirection(this.DataCursorActivity22,binding_getter17,binding_setter16,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir16);
            VTDPropertyInfoBase pi34 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter18 = new VTDObjectGetter(pi34);
            VTDPropertyInfoBase pi35 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightOrders'][1]/*[local-name(.)='FlightsDetails'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter17 = new VTDXPathSetter(pi35,XmlTypeCode.String);
            binding_setter17 = new StringFormaterDecorator(binding_setter17,"{DataSource.WS_Flights!Input.CustomerName}");
            bind_dir17 = new BindDirection(this.DataCursorActivity22,binding_getter18,binding_setter17,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir17);
            XmlDocument StServiceCallActivity6_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity6.ExpectedOutputAttachments = StServiceCallActivity6_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity6_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity6.ExpectedFaultProperties = StServiceCallActivity6_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity6_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlightOrdersResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity6.ExpectedOutputProperties = StServiceCallActivity6_ExpectedOutputProperties_Document;
            set_StServiceCallActivity6_checkpoints(_flow.StServiceCallActivity6);
            XmlDocument StServiceCallActivity13_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity13_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity13_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>Kim W</CustomerName><DepartureDate>{Step.InputProperties.StServiceCallActivity4.Body.GetFlights.FlightDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity4.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>1</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity13.InputEnvelope = StServiceCallActivity13_InputEnvelope_Document;
            _flow.StServiceCallActivity13.Comment = @"";
            _flow.StServiceCallActivity13.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity13.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity13.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity13.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity13.Service = @"Flights_Service";
            _flow.StServiceCallActivity13.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity13.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity13.IsOneWay = false;
            _flow.StServiceCallActivity13.SendRequestToService=true;
            _flow.StServiceCallActivity13.FaultExpected=false;
            _flow.StServiceCallActivity13.IsAsync=false;
            _flow.StServiceCallActivity13.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity13.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi36 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter19 = new VTDXPathGetter(pi36,XmlTypeCode.Int);
            binding_getter19 = new XPathGetterDecorator(binding_getter19,"{Array0}",1);
            VTDPropertyInfoBase pi37 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter18 = new VTDXPathSetter(pi37,XmlTypeCode.Int);
            bind_dir18 = new BindDirection(_flow.StServiceCallActivity4,binding_getter19,binding_setter18,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity13.InDirections.Add(bind_dir18);
            VTDPropertyInfoBase pi38 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseGetter binding_getter20 = new VTDXPathGetter(pi38,XmlTypeCode.DateTime);
            VTDPropertyInfoBase pi39 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter19 = new VTDXPathSetter(pi39,XmlTypeCode.DateTime);
            bind_dir19 = new BindDirection(_flow.StServiceCallActivity4,binding_getter20,binding_setter19,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity13.InDirections.Add(bind_dir19);
            XmlDocument StServiceCallActivity13_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity13.ExpectedOutputAttachments = StServiceCallActivity13_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity13_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity13.ExpectedFaultProperties = StServiceCallActivity13_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity13_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity13_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity13_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity13.ExpectedOutputProperties = StServiceCallActivity13_ExpectedOutputProperties_Document;
            set_StServiceCallActivity13_checkpoints(_flow.StServiceCallActivity13);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    